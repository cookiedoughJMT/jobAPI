
# ================================== KTS ========================

def generate_json_kts_prompt(
        keyword, personality, type
):
    prompt = f"""
    다음은 사용자로부터 입력된 정보입니다:
    - 성격: "{personality}"
    - 키워드: "{keyword}"
    - 타입: "{type}

    요구사항:
    1. 아래 형식에 맞춰 **총 3개의 서로 다른 문장**을 만들어주세요.
    2. 각 문장은 약 3~4문장 정도 분량의 짧은 에세이처럼 구성해주세요.
    3. 성격은 문장의 중심 성격으로 녹여내고, 키워드는 해당 경험이나 행동으로 자연스럽게 반영해주세요.
    4. 문장을 모두 면접관에게 말하듯 '저는'으로 시작되는 존댓말 어조로 써주세요.
    5."타입"이 "장점"일 경우: 키워드에서 해당 성격이 자라난 과정을 중심으로 설명해 주세요. "타입"이 "단점"일 경우: 키워드에서 비롯된 단점 상황과 그것을 극복하려는 과정을 중심으로 작성해 주세요.
    6. 전체를 **JSON 형식**으로 반환해주세요. `"sentences"` 배열로 만들어주세요.
    
    
    응답 예시 (JSON only):
    {{
        "sentences": [
            "첫 번째 성장 배경 문장입니다...",
            "두 번째 성장 배경 문장입니다...",
            "세 번째 성장 배경 문장입니다..."
        ]
    }}
    """

    print(prompt)

    return prompt
# end def

# ================================== Q3 sentence Generator ========================

def generate_json_q3sg_prompt(text, major, degree):
    prompt = f"""
            다음은 사용자가 입력한 학력과 학업 중 경험에 대한 간략한 설명입니다. 이를 바탕으로, 문학적인 표현을 활용해 자기소개서에서 사용할 수 있는 문장 3개를 작성하세요.
            
            - 입력된 학력 : "{degree}"
            - 입력된 전공 : "{major}"
            - 입력된 경험 : "{text}"
            
            📌 작성 규칙:
            1. 총 3개의 서로 다른 자기소개서 문장을 만들어야 합니다.
            2. 각 문장은 최소 3문장 이상으로 구성하세요.
            3. 자연스럽고 서사적인 문체로 작성하세요 (예: 경험의 맥락 → 구체적인 행동 → 느낀 점).
            4. 문장은 모두 면접관에게 말하듯 '저는'으로 시작되는 존댓말 어조로 써주세요.
            5. 최종 출력은 아래 형식처럼 **JSON 배열**로만 반환하세요 (key 없이).
            
            출력 예시:
            [
              "저는 ~로 시작하는 첫 번째 자기소개 문장...",
              "저는 ~로 시작하는 두 번째 자기소개 문장...",
              "저는 ~로 시작하는 세 번째 자기소개 문장..."
            ]
            """

    print(prompt)

    return prompt


# end def

# ================================== Q4 sentence Generator ========================

def generate_json_q4sg_prompt(text, company, position, workperiod, job):
    prompt = f"""
        
            사용자가 아래에 입력한 근무 정보를 바탕으로, 자기소개서에서 사용할 수 있는 문장 3개를 작성하세요. 문장은 회사에서의 직무 경험과 배운 점, 성과, 느낀 점 등을 중심으로 서사적으로 풀어내야 하며, 각 문장은 반드시 '저는'으로 시작하고 존댓말을 사용해야 합니다.

            - 회사명: "{company}"
            - 직급/직책: "{position}"
            - 근무 기간: "{workperiod}"
            - 담당 직무: "{job}"
            - 주요 경험 요약: "{text}"
            
            📌 작성 규칙:
            1. 총 3개의 서로 다른 자기소개 문장을 작성하세요.
            2. 각 문장은 반드시 3문장 이상으로 구성하세요.
            3. 문학적이고 서사적인 문체로 자연스럽게 작성하세요.
            4. 모든 문장은 '저는'으로 시작하고, 존댓말 어조를 사용하세요.
            5. 문장 속에 입력된 회사명, 직무, 직책, 경험 요약이 자연스럽게 반영되어야 합니다.
            6. 아래 출력 예시처럼 JSON 배열 형식으로만 반환하세요. key 없이 배열([])만 출력해야 합니다.
            
            출력 예시:
            [
              "저는 A기업에서 마케팅 대리로 근무하며 고객 타겟 분석과 캠페인 실행을 주도한 경험이 있습니다. 그 과정에서 고객 데이터를 기반으로 전략을 수립하고, 팀원들과의 협업을 통해 프로젝트 성과를 높일 수 있었습니다. 이 경험은 제게 실무 능력뿐만 아니라 커뮤니케이션과 책임감의 중요성을 일깨워준 소중한 시간이었습니다.",
              "저는 B회사에서 UX 디자이너로 근무하며 사용자 피드백을 기반으로 한 화면 설계를 경험했습니다. 특히 리디자인 프로젝트를 통해 팀 내 소통과 유연한 대응 역량을 키울 수 있었습니다. 실질적인 사용자 중심 사고가 무엇인지 체득하게 된 계기가 되었습니다.",
              "저는 C기업의 인턴으로 참여한 기간 동안, 데이터 분석과 리포트 작성 업무를 맡아 실무 감각을 익혔습니다. 매일 반복되는 작업 속에서도 데이터가 말하는 인사이트를 끌어내는 과정이 매우 흥미로웠고, 분석적 사고 능력을 키우는 데 큰 도움이 되었습니다. 이 경험은 제 진로에 대한 확신을 심어준 중요한 전환점이었습니다."
            ]
            """
    print(prompt)

    return prompt

# end def

# ================================== Q6 sentence Generator ========================

def generate_json_q6sg_prompt(text, achievements):
    joined_achievements = ', '.join(f'"{a}"' for a in achievements)

    prompt = f"""
    사용자가 아래에 입력한 자격증 또는 수상 경력 정보를 바탕으로, 자기소개서에서 사용할 수 있는 문장 3개를 작성하세요. 
    각 문장은 회사에서의 직무 경험과 배운 점, 성과, 느낀 점 등을 중심으로 **서사적으로 풀어내야 하며**, 
    모든 문장은 반드시 '저는'으로 시작하고 존댓말을 사용해야 합니다.

    - 자격증 또는 수상 경력 (복수 가능): [{joined_achievements}]
    - 지원자가 해당 자격증 또는 수상 경력을 얻기 위해 한 노력 요약: "{text}"

    📌 작성 규칙:
    1. 총 3개의 **서로 다른 자기소개 문장**을 작성하세요.
    2. 각 문장은 반드시 3문장 이상으로 구성하세요.
    3. 문학적이고 서사적인 문체로 자연스럽게 작성하세요.
    4. 모든 문장은 '저는'으로 시작하고, 존댓말 어조를 사용하세요.
    5. 자격증 또는 수상 경력은 문장 속에 자연스럽게 녹여내되, 강조 포인트로 활용하세요.
    6. 아래 출력 예시처럼 **JSON 배열 형식으로만** 반환하세요. key 없이 배열([])만 출력해야 합니다.

    출력 예시:
    [
      "저는 산업안전기사 자격증을 취득하기 위해 현장 실습과 이론 학습에 꾸준히 몰입했습니다. 이 자격을 바탕으로 실제 공정 내 안전 절차 수립에 직접 기여한 경험이 있습니다. 안전이 기업의 기본이라는 신념을 몸소 체득한 소중한 시간이었습니다.",
      "저는 공모전에서 대상을 수상한 경험이 있습니다. 해당 수상을 위해 팀원들과 밤낮없이 아이디어를 고도화하고 발표 자료를 준비하는 과정을 겪었습니다. 이 과정은 제게 기획력과 실행력, 그리고 협업의 중요성을 절실히 느끼게 해주었습니다.",
      "저는 컴퓨터 활용능력 1급을 취득하며 데이터 정리와 문서 자동화 능력을 키울 수 있었습니다. 특히 실무에 적용하며 팀 내 보고서 작업 효율을 크게 향상시켰던 경험이 있습니다. 기술을 통한 문제 해결이 얼마나 중요한지를 체감했던 시기였습니다."
    ]
    """

    print(prompt)

    return prompt

# end def

# ================================== Q7 sentence Generator ========================

def generate_json_q7sg_prompt(text):
        prompt = f"""
        사용자가 아래에 입력한 내용을 바탕으로, 자기소개서에서 사용할 수 있는 문장 3가지를 제안해주세요.
        입력 내용은 사용자가 작성한 '회사에 대한 포부 또는 입사 후 목표'의 초안입니다.

        📌 작성 조건:
        1. 총 3개의 **서로 다른 스타일의 자기소개 문장**을 작성하세요.
        2. 각 문장은 **3문장 이상**으로 구성하되, 자연스러운 흐름을 가진 **서사형 문체**로 작성하세요.
        3. 모든 문장은 반드시 '저는'으로 시작하고, **존댓말 어조**를 유지하세요.
        4. 입력된 내용을 그대로 반복하지 말고, 핵심 의도를 살려 다듬고 확장해서 작성하세요.
        5. 회사에 대한 진심 어린 포부, 구체적인 실행 계획, 배경 동기를 서술 속에 녹여내세요.
        6. 아래 출력 예시처럼 **JSON 배열 형식으로만** 출력하세요. key 없이 배열([])만 반환해야 합니다.

        입력 내용: "{text}"

        출력 예시:
        [
          "저는 고객 중심의 서비스를 만들겠다는 꿈을 실현하기 위해 귀사에 지원하게 되었습니다. 특히 사용자의 니즈를 깊이 이해하고 이를 반영한 프로젝트를 주도하고 싶습니다. 이를 통해 회사의 가치와 저의 성장을 함께 이끌어가고자 합니다.",
          "저는 데이터를 기반으로 전략을 세우고 실행하는 일에 매력을 느낍니다. 귀사의 데이터 기반 의사결정 문화에 큰 감명을 받았고, 저 또한 이 과정에 실질적인 기여를 하고 싶습니다. 주도적으로 분석하고 개선을 제안하는 구성원이 되겠습니다.",
          "저는 변화에 민감하게 대응하고 끊임없이 배우는 자세로 일하는 것을 중요하게 생각합니다. 귀사의 빠른 성장과 혁신적인 기업문화 속에서, 능동적으로 도전하며 함께 성장할 수 있다고 믿습니다. 입사 후에도 성실한 자세로 맡은 바를 완수하겠습니다."
        ]
        """

        print(prompt)

        return prompt

# end def

# ================================== create resume  ========================

def generate_json_createresume_prompt(personalities, degree, major, whenLearn, company, workPeriod, position, job, whenWork, achievements, whenDoing, forCompany):

    education_block = ""
    if any([company, position, workPeriod, job, whenWork]):
        education_block = f"또한, 지원자의 회사 경험(회사: `{company or ''}`, 직급: `{position or ''}`, 근무 기간: `{workPeriod or ''}`, 직무: `{job or ''}`, 느낀 점: `{whenWork or ''}`)을 포함해 연결하세요."

    career_block = "반드시 null로 응답"
    if achievements:
        if any([achievements, whenDoing]):
            career_block = f"사용자의 **자격증 및 수상경력**({achievements})과 해당 경험의 노력 서사({whenDoing})를 기반으로, **실력과 태도, 성장 의지**를 강조하는 문단을 작성하세요."
        else:
            career_block = f"사용자의 **자격증 및 수상경력**({achievements})를(을) 기반으로, **실력과 태도, 성장 의지**를 강조하는 문단을 작성하세요."

    prompt = f"""
            당신은 지원자의 입력값을 바탕으로, 4개의 자기소개서 문단을 구성해야 합니다. 각각의 문단은 아래와 같은 목적을 갖습니다:
            
            1️⃣ personality: 지원자의 **성격적 장점 3개, 단점 2개**를 바탕으로 형성된 **성장 과정과 인성**을 서술합니다. 각 성격 항목의 `answer` 필드를 활용해, 자연스럽게 이어지는 하나의 서사 문단으로 구성하세요.
            
            2️⃣ education: 사용자의 **학력 정보({degree}, {major})와 학업 중 경험**을 바탕으로, **지원 직무에 얼마나 적합한지**를 강조하세요. {education_block}
            
            3️⃣ career: {career_block}
            
            4️⃣ attitude: 사용자가 입력한 **회사에 대한 포부**({forCompany})를 바탕으로, 입사 후 어떤 태도와 자세로 근무할지를 다룬 문단을 작성하세요.
            
            📌 작성 규칙:
            - 각 항목은 `personality`, `education`, `career`, `attitude` 키를 가진 JSON 형식으로 구성하세요.
            - 각 문단은 반드시 모두 10문장 이상의 자연스러운 자기소개 문단으로 작성되어야 합니다.
            - **모든 문장은 '저는'으로 시작**하고, **존댓말**로 마무리되어야 합니다.
            - 중복된 문장 없이, 자연스럽게 연결된 흐름을 가진 서사형 문단을 작성하세요.
            - 최종 출력은 key가 포함된 JSON 객체로 반환하며, 예시는 아래와 같습니다:
            
            다음은 사용자가 입력한 실제 데이터입니다:
            - 성격 요약: {[p["text"] for p in personalities]}
            - 성장 서사: {[p["answer"] for p in personalities]}
            - 학력 요약: {degree}, {major}
            - 학업 중 경험: {whenLearn}
            - 경력 요약: 다니던 회사: {company}, 직급/직책: {position}, 직무: {job}, 근무 중 느낀점: {whenWork}
            - 자격증/수상: {achievements}
            - 자격증 준비 경험: {whenDoing}
            - 회사 포부: {forCompany}
            
            반드시 아래 형식으로 출력하세요:
            {{
              "personality": "...",
              "education": "...",
              "career": "...",
              "attitude": "..."
            }}
            """
    print(prompt)

    return prompt

# end def
